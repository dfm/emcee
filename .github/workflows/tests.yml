name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
    
jobs:
  tests:
    name: "py${{ matrix.python-version }} / ${{ matrix.os }} / extras: ${{ matrix.extras }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
        extras: [true]
        os: ["ubuntu-latest"]
        include:
          - python-version: "3.8"
            extras: false
            os: "ubuntu-latest"
          - python-version: "3.8"
            extras: true
            os: "macos-latest"
          - python-version: "3.8"
            extras: true
            os: "windows-latest"

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      if: ${{ matrix.extras }}
      run: |
        python -m pip install -U pip
        python -m pip install -e ".[extras,tests]"
    - name: Install dependencies without extras
      if: ${{ !matrix.extras }}
      run: |
        python -m pip install -U pip
        python -m pip install -e ".[tests]"
    - name: Run tests
      run: |
        python -m pytest -v src/emcee/tests --cov emcee
    - name: Get unique id
      if: ${{ matrix.os != 'windows-latest' }}
      id: unique-id
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      run: |
        export JOB_ID=`echo $STRATEGY_CONTEXT | md5sum`
        echo "::set-output name=id::$JOB_ID"
    - uses: actions/upload-artifact@v2
      if: ${{ matrix.os != 'windows-latest' }}
      with:
        name: cov-${{ steps.unique-id.outputs.id }}
        path: .coverage
        
  coverage:
    name: "Merge and upload coverage"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Download all artifacts
        uses: actions/download-artifact@v2
      - name: Merge and upload coverage
        run: |
          python -m pip install coveralls
          find . -name \.coverage -exec coverage combine --append {} \;
          coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}

  build:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.8"

      - name: Build
        run: |
          python -m pip install -U pip pep517 twine setuptools_scm
          python -m pep517.build .
      - name: Test the sdist
        run: |
          python -m venv venv-sdist
          venv-sdist/bin/python -m pip install dist/emcee*.tar.gz
          venv-sdist/bin/python -c "import emcee;print(emcee.__version__)"
      - name: Test the wheel
        run: |
          python -m venv venv-wheel
          venv-wheel/bin/python -m pip install dist/emcee*.whl
          venv-wheel/bin/python -c "import emcee;print(emcee.__version__)"
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/*

  upload_pypi:
    needs: [tests, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/
